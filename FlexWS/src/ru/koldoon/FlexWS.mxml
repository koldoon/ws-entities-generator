<?xml version="1.0"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
                       xmlns:mx="library://ns.adobe.com/flex/mx"
                       xmlns:mxc="mx.collections.*" xmlns:model="ru.koldoon.model.*"
                       xmlns:export="ru.koldoon.model.export.*" xmlns:type="ru.koldoon.model.type.*"
                       xmlns:actionscript="ru.koldoon.model.export.actionscript.*" xmlns:json="ru.koldoon.model.export.json.*"

                       showStatusBar="false" width="1400" height="930" minWidth="1000" minHeight="700"
                       frameRate="60" backgroundAlpha="0"
                       title="WebServices Entities ActionScript Generator v1.0"

                       creationComplete="creationCompleteHandler(event)">

    <fx:Style source="/ru/koldoon/resources/css/application.css"/>

    <fx:Declarations>
        <model:WSDLLoader id="wsdlLoader" complete="{ wsdlModel.source = wsdlLoader.wsdl }"/>
        <model:WSDL id="wsdlModel" wsdlChange="wsdlModel_wsdlChangeHandler(event)"/>

        <model:JavaTypesParser id="javaClassesParser"
                               javaRoot="{Settings.getInstance().javaRoot}"
                               progressMessage="{statusMsg = event.message}"
                               typeFound="javaClassesParser_typeFoundHandler(event)"
                               complete="javaClassesParser_parsingCompleteHandler(event)"/>

        <actionscript:ActionScriptExporter id="asExporter"/>
        <json:JsonExporter id="jsonExporter"/>

        <export:FileSystemExporter id="fileSystemExporter"
                                   typeExporter="{ asExporter }" target="{ Settings.getInstance().target }"
                                   progressMessage="{statusMsg = event.message}"
                                   complete="{statusMsg = 'Complete'}"/>

        <mxc:VectorCollection id="complexTypesCollection" source="{ wsdlModel.types }"
                              filterFunction="{ function f(item:Object):Boolean { return item is ComplexType; } }"/>

        <mxc:VectorCollection id="simpleTypesCollection" source="{ wsdlModel.types }"
                              filterFunction="{ function f(item:Object):Boolean { return item is EnumType; } }"/>

        <fx:Boolean id="complexSelected">{ typesViewStack.selectedChild == complexTypesContent }</fx:Boolean>
        <type:AbstractType id="selectedItem">
            {complexSelected ? AbstractType(complexTypesGrid.selectedItem) : AbstractType(simpleTypesGrid.selectedItem)}
        </type:AbstractType>
    </fx:Declarations>

    <s:Rect top="20" right="20" bottom="20" left="20">
        <s:fill>
            <s:SolidColor color="{Palette.WHITE}"/>
        </s:fill>
        <s:filters>
            <s:DropShadowFilter distance="0" blurX="18" blurY="18" quality="3"/>
        </s:filters>
    </s:Rect>

    <s:VGroup top="20" right="20" bottom="20" left="20" gap="0">
        <s:BorderContainer width="100%" backgroundColor="{Palette.DARK_BROWN}" borderVisible="false"
                           mouseDown="{ NativeWindow(stage.nativeWindow).startMove(); }">
            <s:layout>
                <s:HorizontalLayout paddingLeft="10" paddingTop="10" paddingBottom="10" paddingRight="10"
                                    verticalAlign="baseline" gap="5"/>
            </s:layout>

            <s:Label text="{this.title}" fontWeight="bold" color="{Palette.WHITE}"/>

            <s:Spacer width="100%"/>
            <s:Label text="[-]" color="{Palette.WHITE}" buttonMode="true" fontFamily="consolas" fontSize="14"
                     click="{ NativeWindow(stage.nativeWindow).minimize(); }"/>
            <s:Label text="[x]" color="{Palette.WHITE}" buttonMode="true" fontFamily="consolas" fontSize="14"
                     click="{ NativeWindow(stage.nativeWindow).close(); }"/>
        </s:BorderContainer>

        <s:BorderContainer width="100%" backgroundColor="{Palette.DARK_BROWN}" borderVisible="false">
            <s:layout>
                <s:HorizontalLayout paddingLeft="10" paddingTop="10" paddingBottom="10" paddingRight="10" verticalAlign="middle"/>
            </s:layout>

            <s:Label text="WSDL:" fontWeight="bold" color="{Palette.WHITE}"/>
            <s:ComboBox id="wsdlInput" prompt="{'Paste a URL or select a file'}" width="100%" borderAlpha="0.5" focusAlpha="0"
                        dataProvider="{ Settings.getInstance().wsdlUrlsHistory }" valueCommit="wsdlInput_valueCommitHandler(event)"/>
            <s:Button id="browseWsdlButton" label="Browse" click="browseButton_clickHandler(event)"/>
        </s:BorderContainer>

        <s:BorderContainer width="100%" backgroundColor="{Palette.WHITE}" borderVisible="false">
            <s:layout>
                <s:HorizontalLayout paddingLeft="10" paddingTop="10" paddingBottom="10" paddingRight="10" verticalAlign="baseline"/>
            </s:layout>

            <s:Label text="Project Root:"/>
            <s:TextInput id="projectRootInput" width="100%" editable="false" focusEnabled="false"
                         text="{ Settings.getInstance().projectRoot }" toolTip="{projectRootInput.text}"/>
            <s:Button id="browseRootButton" label="Browse" click="browseRootButton_clickHandler(event)"/>

            <s:Label text="Java Root:" paddingLeft="15"/>
            <s:TextInput id="javaRootInput" width="100%" editable="false" focusEnabled="false"
                         text="{ Settings.getInstance().javaRoot }" toolTip="{javaRootInput.text}"/>
            <s:Button id="browseJavaRootButton" label="Browse" click="browseJavaRootButton_clickHandler(event)"/>

            <s:Label text="Target:" paddingLeft="15"/>
            <s:TextInput id="targetInput" width="100%" editable="false" focusEnabled="false"
                         text="{ Settings.getInstance().target }" toolTip="{targetInput.text}"/>
            <s:Button id="browseTargetButton" label="Browse" click="browseTargetButton_clickHandler(event)"/>
        </s:BorderContainer>

        <mx:HDividedBox width="100%" height="100%" paddingBottom="6">
            <s:VGroup width="100%" height="100%" minWidth="{typesBar.width}" gap="0">
                <s:BorderContainer backgroundColor="0xc3b69f" width="100%" borderVisible="false">
                    <s:HGroup id="typesBar" paddingLeft="10" paddingTop="6" paddingBottom="6" paddingRight="10">
                        <s:ButtonBar dataProvider="{typesViewStack}"/>

                        <s:HGroup gap="-1" verticalAlign="baseline"
                                  includeInLayout="{ typesViewStack.selectedChild == typesMapContent }"
                                  visible="{ typesViewStack.selectedChild == typesMapContent }">

                            <s:Button label="Add" click="{ Settings.getInstance().typesMapCollection.addItem( { } ); }"/>
                            <s:Button label="Remove" click="{ Settings.getInstance().typesMapCollection.removeItemAt(typesMapGrid.selectedIndex); }"/>
                            <s:Spacer width="10"/>
                            <s:Label text="defaults" buttonMode="true" textDecoration="underline" id="defaultsLabel" click="defaultsLabel_clickHandler(event)"/>
                        </s:HGroup>
                    </s:HGroup>
                </s:BorderContainer>

                <mx:ViewStack id="typesViewStack" width="100%" height="100%">
                    <s:NavigatorContent id="complexTypesContent"
                                        label="Complex Types Avaliable [{complexTypesCollection.length}]">
                        <s:DataGrid id="complexTypesGrid" width="100%" height="100%" horizontalScrollPolicy="off"
                                    dataProvider="{ complexTypesCollection }">
                            <s:columns>
                                <s:ArrayCollection>
                                    <s:GridColumn width="26" resizable="false"
                                                  itemRenderer="ru.koldoon.view.components.dataGrid.itemRenderer.CellBooleanRenderer"/>
                                    <s:GridColumn headerText="Local Type" dataField="name" minWidth="240" width="240"/>
                                    <s:GridColumn headerText="Remote Type (Java)" dataField="remoteType" showDataTips="true"/>
                                    <s:GridColumn headerText="Status" width="54" resizable="false"
                                                  itemRenderer="ru.koldoon.view.components.dataGrid.itemRenderer.CellStatusRenderer"/>
                                </s:ArrayCollection>
                            </s:columns>
                        </s:DataGrid>
                    </s:NavigatorContent>

                    <s:NavigatorContent id="simpleTypesContent" label="Simple Types Avaliable [{simpleTypesCollection.length}]">
                        <s:DataGrid id="simpleTypesGrid" width="100%" height="100%" horizontalScrollPolicy="off"
                                    dataProvider="{ simpleTypesCollection }">
                            <s:columns>
                                <s:ArrayCollection>
                                    <s:GridColumn width="26" resizable="false"
                                                  itemRenderer="ru.koldoon.view.components.dataGrid.itemRenderer.CellBooleanRenderer"/>
                                    <s:GridColumn headerText="Local Type" dataField="name" minWidth="240" width="240"/>
                                    <s:GridColumn headerText="Remote Type (Java)" dataField="remoteType" showDataTips="true"/>
                                    <s:GridColumn headerText="Status" width="54" resizable="false"
                                                  itemRenderer="ru.koldoon.view.components.dataGrid.itemRenderer.CellStatusRenderer"/>
                                </s:ArrayCollection>
                            </s:columns>
                        </s:DataGrid>
                    </s:NavigatorContent>

                    <s:NavigatorContent id="typesMapContent" label="Types Map">
                        <s:DataGrid id="typesMapGrid" width="100%" height="100%" horizontalScrollPolicy="off"
                                    dataProvider="{ Settings.getInstance().typesMapCollection }"
                                    editable="true" focusEnabled="false">
                            <s:columns>
                                <s:ArrayCollection>
                                    <s:GridColumn headerText="Remote Type" dataField="remoteType" editable="true"/>
                                    <s:GridColumn headerText="Local Type" dataField="localType" editable="true"/>
                                </s:ArrayCollection>
                            </s:columns>
                        </s:DataGrid>
                    </s:NavigatorContent>
                </mx:ViewStack>
            </s:VGroup>

            <s:VGroup height="100%" width="440" minWidth="{contentPreviewBar.width}" gap="0">
                <s:BorderContainer backgroundColor="0xc3b69f" width="100%" borderVisible="false">
                    <s:layout>
                        <s:HorizontalLayout horizontalAlign="right"/>
                    </s:layout>

                    <s:HGroup id="contentPreviewBar" paddingLeft="10" paddingTop="6" paddingBottom="6" paddingRight="10">
                        <s:ButtonBar dataProvider="{contentViewStack}"/>
                    </s:HGroup>
                </s:BorderContainer>

                <mx:ViewStack id="contentViewStack" width="100%" height="100%">
                    <s:NavigatorContent label="Selected Type Description" width="100%" height="100%">
                        <mx:TextArea width="100%" height="100%" wordWrap="false"
                                     horizontalScrollPolicy="off" focusThickness="0" editable="false"
                                     htmlText="{ selectedItem.getDescription() }"/>
                    </s:NavigatorContent>

                    <s:NavigatorContent label="Implementation Preview" width="100%" height="100%">
                        <mx:TextArea width="100%" height="100%" wordWrap="false"
                                     horizontalScrollPolicy="off" focusThickness="0" editable="false"
                                     text="{ asExporter.getTypeImplementation(selectedItem) }"/>
                    </s:NavigatorContent>

                    <s:NavigatorContent label="JSON Template" width="100%" height="100%">
                        <mx:TextArea width="100%" height="100%" wordWrap="false"
                                     horizontalScrollPolicy="off" focusThickness="0" editable="false"
                                     htmlText="{ jsonExporter.getTypeImplementation(selectedItem) }"/>
                    </s:NavigatorContent>
                </mx:ViewStack>
            </s:VGroup>
        </mx:HDividedBox>

        <s:BorderContainer width="100%" backgroundColor="{Palette.DARK_BROWN}" borderVisible="false">
            <s:HGroup verticalAlign="baseline" bottom="10" left="10" right="10" top="10">
                <s:Label text="{statusMsg || 'ActionScript WebServices Generator, koldoon, 2013.'}"
                         color="{Palette.WHITE}" alpha="0.6"/>
                <s:Spacer width="100%"/>
                <s:Button label="Begin Export" click="{ fileSystemExporter.beginExportSelected(); }"/>
            </s:HGroup>

        </s:BorderContainer>
    </s:VGroup>

    <s:Group id="resizeHandler" right="21" bottom="21" width="15" height="15" mouseDown="resizeHandler_clickHandler(event)"
             buttonMode="true">
        <s:Path data="M 4 13 L 13 4 L 13 13 L 4 13">
            <s:fill>
                <s:SolidColor color="0xffffff" alpha="0.6"/>
            </s:fill>
        </s:Path>
    </s:Group>


    <fx:Script><![CDATA[
        import mx.controls.Alert;
        import mx.events.CloseEvent;
        import mx.events.FlexEvent;

        import ru.koldoon.model.JavaTypesParserEvent;
        import ru.koldoon.model.Settings;
        import ru.koldoon.model.export.IExportableType;
        import ru.koldoon.model.type.ComplexType;
        import ru.koldoon.model.type.EnumType;
        import ru.koldoon.tools.isEmpty;
        import ru.koldoon.view.Palette;

        [Bindable]
        private var statusMsg:String;

        [Bindable]
        private var currentWsdlUrl:String;

        private var fileReference:FileReference;
        private var projectRoot:File = new File();
        private var javaRoot:File = new File();
        private var target:File = new File();

        private function browseButton_clickHandler(event:MouseEvent):void
        {
            fileReference = new FileReference();
            fileReference.addEventListener(Event.SELECT, fileReference_selectHandler, false, 0, true);
            fileReference.addEventListener(Event.CANCEL, fileReference_selectHandler, false, 0, true);
            fileReference.browse();
        }

        private function fileReference_selectHandler(event:Event):void
        {
            fileReference.removeEventListener(Event.SELECT, fileReference_selectHandler);
            fileReference.removeEventListener(Event.CANCEL, fileReference_selectHandler);

            if (event.type == Event.CANCEL)
            {
                return;
            }

            wsdlInput.selectedItem = "file://" + fileReference.name;
            fileReference.addEventListener(Event.COMPLETE, fileReference_uploadCompleteDataHandler);
            fileReference.load();
        }

        private function fileReference_uploadCompleteDataHandler(event:Event):void
        {
            fileReference.removeEventListener(Event.COMPLETE, fileReference_uploadCompleteDataHandler);
            var textData:String = fileReference.data.readUTFBytes(fileReference.data.bytesAvailable);
            wsdlModel.source = new XML(textData);
        }


        private function wsdlInput_valueCommitHandler(event:Event):void
        {
            if (isEmpty(wsdlInput.selectedItem))
                return;

            currentWsdlUrl = wsdlInput.selectedItem;
            wsdlLoader.load(wsdlInput.selectedItem);
            Settings.getInstance().commitWsdlUrl(currentWsdlUrl);
            wsdlInput.selectedItem = currentWsdlUrl;
        }


        /**
         * Init
         * @param event
         */
        private function creationCompleteHandler(event:FlexEvent):void
        {
            javaRoot.addEventListener(Event.SELECT, javaRoot_selectHandler);
            projectRoot.addEventListener(Event.SELECT, projectRoot_selectHandler);
            target.addEventListener(Event.SELECT, target_selectHandler);
        }


        private function browseRootButton_clickHandler(event:MouseEvent):void
        {
            try
            {
                projectRoot.nativePath = Settings.getInstance().projectRoot;
            }
            catch (err:Error)
            { }

            projectRoot.browseForDirectory("Select project root directory");
        }

        private function projectRoot_selectHandler(event:Event):void
        {
            Settings.getInstance().projectRoot = projectRoot.nativePath;
        }

        private function defaultsLabel_clickHandler(event:MouseEvent):void
        {
            Alert.show(
                    "This will replace all your current settings!",
                    "Do you know what're you doing?",
                    Alert.YES | Alert.NO, this, defaultsAlert_closeHandler);
        }

        private function defaultsAlert_closeHandler(event:CloseEvent):void
        {
            if (event.detail == Alert.YES)
            {
                Settings.getInstance().resetTypesMap();
            }
        }

        private function browseJavaRootButton_clickHandler(event:MouseEvent):void
        {
            try
            {
                javaRoot.nativePath = Settings.getInstance().javaRoot;
            }
            catch (err:Error)
            { }

            javaRoot.browseForDirectory("Select Java classes root directory");
        }

        private function javaRoot_selectHandler(event:Event):void
        {
            Settings.getInstance().javaRoot = javaRoot.nativePath;
            parseJavaClasses();
        }

        private function wsdlModel_wsdlChangeHandler(event:Event):void
        {
            parseJavaClasses();
        }

        private function parseJavaClasses():void
        {
            if (wsdlModel.types.length > 0)
            {
                javaClassesParser.start();
            }
        }

        private function javaClassesParser_typeFoundHandler(event:JavaTypesParserEvent):void
        {
            if (wsdlModel.typesMap[event.typeName])
            {
                var typeModel:AbstractType = AbstractType(wsdlModel.typesMap[event.typeName]);
                typeModel.selected = isEmpty(typeModel.remoteType);
                typeModel.remoteType = event.typePackage + "." + event.typeName;
            }
        }

        private function browseTargetButton_clickHandler(event:Event):void
        {
            try
            {
                target.nativePath = Settings.getInstance().target;
            }
            catch (err:Error)
            { }

            target.browseForDirectory("Select target directory for generated classes");
        }

        private function target_selectHandler(event:Event):void
        {
            Settings.getInstance().target = target.nativePath;
        }

        private function javaClassesParser_parsingCompleteHandler(event:Event):void
        {
            statusMsg = "Complete";
            var exportableTypes:Vector.<IExportableType> = new Vector.<IExportableType>();
            for each (var type:AbstractType in wsdlModel.types)
            {
                exportableTypes.push(type);
            }

            fileSystemExporter.types = exportableTypes;
            fileSystemExporter.getFilesStatus();
        }

        private function resizeHandler_clickHandler(event:MouseEvent):void
        {
            NativeWindow(stage.nativeWindow).startResize(NativeWindowResize.BOTTOM_RIGHT);
        }
        ]]></fx:Script>
</s:WindowedApplication>
